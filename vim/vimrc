" nem's vimrc
"
" leader key:                    ,
" ,V - reloads vimrc
" vundle package manager
"
" scrooloose/nerdree
"    bring up NERDTree:          ,d
"
" 'kien/ctrlp.vim'
"    fuzzy find directory:       ,t
"    fuzzy find buffer:          ,b
"
" 'rking/ag.vim'
"    search with ag:             ,a
"
" 'tpope/vim-surround'
"    surround.vim:
"    examples:
"    change double quotes with single: cs"'
"    change single quote with tags: cs'<q>
"    change tags to quotes: cst"
"    remove quotes: ds"
"    surround word with []: ysiw]
"    (iw) - text object
"    wrap line in parens: yssb | yss)
"    select mode wrap in: S"
"
" 'scrooloose/nerdcommenter'
"    ,cc - comment selection
"    ,cu - uncomment selection

""" FUNCTIONAL """

syntax enable
set nocompatible
filetype off

""" (>'.')> vundle stuff BEGIN <('.'<) """
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-surround'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'rking/ag.vim'
Plugin 'airblade/vim-gitgutter'

" Snippets
Plugin 'SirVer/ultisnips' " engine
"   the snippets
"   found in ~/.vim/bundle/vim-snippets/snippets/extension.snippets
Plugin 'honza/vim-snippets'

call vundle#end()
" to install:
" $ vim +PluginInstall +qall
""" (>'.')> vundle stuff END <('.'<) """

filetype plugin indent on

" jk escapes insert mode
inoremap jk <ESC>

set autoindent
let mapleader = ','
set directory-=.               " don't store swapfiles in the current directory
set encoding=utf-8             " always
set expandtab                  " expand tabs to spaces
set ignorecase                 " case-insensitive search
set incsearch                  " search as you type
set list                       " show trailing whitespace
set listchars=tab:▸\ ,trail:▫  " show tabs and trailing spaces
set number                     " show line numbers
set ruler                      " show where you are
set softtabstop=2              " insert mode tab and backspace use 2 spaces
set tabstop=2                  " actual tabs occupy 2 characters
set shiftwidth=2
set laststatus=2               " always show statusline
set wildmode=list              " set wildmenu to list all matches

" makes it a lil easier to navigate vim panes in tmux without leaving vim
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" reload config
noremap <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
nnoremap <leader>d :NERDTreeToggle<CR>
nnoremap <leader>t :CtrlP<CR>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>nem :echo 'Nem rules!'<CR>

" more specific configs

" Use The Silver Searcher for stuff
nnoremap <leader>a :Ag<space>
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ctrl_p_use_caching = 0
endif

" snippets
" Trigger configuration
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" :UltiSnipsEdit splits window.
let g:UltiSnipsEditSplit="vertical"


" gitgutter
" background of gitgutter
" black black white text
let g:gitgutter_override_sign_column_highlight = 0
highlight SignColumn ctermbg=black
highlight SignColumn guibg=black
highlight GitGutterAdd ctermbg=black
highlight GitGutterAdd ctermfg=white
highlight GitGutterChange ctermbg=black
highlight GitGutterChange ctermfg=white
highlight GitGutterDelete ctermbg=black
highlight GitGutterDelete ctermfg=white
highlight GitGutterChangeDelete ctermbg=black
let g:gitgutter_sign_added = '++'
let g:gitgutter_sign_modified = '*~'
let g:gitgutter_sign_removed = 'xx'


" source any local vim-ery
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

" bits stolen from:
" - https://github.com/square/maximum-awesome
